name: Dependency Management

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-dependencies:
    name: Update dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Generate updated requirements
      run: |
        # Generate updated requirements files if using pip-tools
        # For pyproject.toml, we'll check for updates differently
        pip-compile --upgrade --output-file requirements-dev.txt pyproject.toml --extra dev || true
        pip-compile --upgrade --output-file requirements-docs.txt pyproject.toml --extra docs || true

    - name: Check for dependency updates
      id: check_updates
      run: |
        # Check if any dependencies have updates
        if pip list --outdated --format=json | jq '. | length' | grep -v '^0$'; then
          echo "updates_available=true" >> $GITHUB_OUTPUT
          echo "Updates available:"
          pip list --outdated
        else
          echo "updates_available=false" >> $GITHUB_OUTPUT
          echo "No updates available"
        fi

    - name: Test with updated dependencies
      if: steps.check_updates.outputs.updates_available == 'true'
      run: |
        # Install updated dependencies and run tests
        pip install -e ".[dev]"
        
        # Run a subset of critical tests
        pytest tests/unit/test_config.py tests/unit/test_registry.py -v
        
        # Run type checking
        mypy src/yolocam --ignore-missing-imports || true
        
        # Run basic linting
        flake8 src/yolocam --select=E9,F63,F7,F82 --show-source

    - name: Create dependency update PR
      if: steps.check_updates.outputs.updates_available == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "üîÑ Automated dependency updates"
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated dependency updates.
          
          ### Changed Dependencies
          ```
          ${{ steps.check_updates.outputs.updates }}
          ```
          
          ### Test Results
          - ‚úÖ Unit tests passed
          - ‚úÖ Type checking completed
          - ‚úÖ Basic linting passed
          
          **Note**: Please review changes and run full test suite before merging.
          
          ---
          Generated by automated dependency update workflow
        branch: automated/dependency-updates
        delete-branch: true
        labels: |
          dependencies
          automated

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=audit-report.json || true

    - name: Check for vulnerabilities
      id: vuln_check
      run: |
        # Check if vulnerabilities were found
        if [ -f safety-report.json ] && [ "$(cat safety-report.json | jq '.vulnerabilities | length')" -gt 0 ]; then
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          echo "Safety vulnerabilities found:"
          cat safety-report.json | jq '.vulnerabilities'
        elif [ -f audit-report.json ] && [ "$(cat audit-report.json | jq '. | length')" -gt 0 ]; then
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          echo "Pip-audit vulnerabilities found:"
          cat audit-report.json | jq '.'
        else
          echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          echo "No vulnerabilities found"
        fi

    - name: Create security issue
      if: steps.vuln_check.outputs.vulnerabilities_found == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Security vulnerabilities detected',
            body: `## Security Vulnerabilities Detected
            
            Automated security scan has detected vulnerabilities in dependencies.
            
            ### Action Required
            - Review the vulnerability reports
            - Update affected dependencies
            - Test the fixes
            - Deploy security updates
            
            ### Reports
            - Safety report: Available in workflow artifacts
            - Pip-audit report: Available in workflow artifacts
            
            ---
            Generated by automated security audit workflow`,
            labels: ['security', 'critical', 'automated']
          })

    - name: Upload security reports
      if: steps.vuln_check.outputs.vulnerabilities_found == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          audit-report.json

  license-check:
    name: License compliance check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
        
        if pip-licenses --format=csv | grep -E "$PROBLEMATIC_LICENSES"; then
          echo "‚ö†Ô∏è Problematic licenses found!"
          pip-licenses --format=table | grep -E "$PROBLEMATIC_LICENSES"
          exit 1
        else
          echo "‚úÖ No problematic licenses found"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json