name: Code Quality & Maintenance

on:
  schedule:
    # Run monthly on the 1st at 6 AM UTC
    - cron: '0 6 1 * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install radon vulture dead bandit[toml] semgrep

    - name: Calculate code complexity
      run: |
        echo "## Code Complexity Report" >> code-quality-report.md
        echo "" >> code-quality-report.md
        
        echo "### Cyclomatic Complexity" >> code-quality-report.md
        radon cc src/yolocam --min=B --show-complexity >> code-quality-report.md || true
        
        echo "" >> code-quality-report.md
        echo "### Maintainability Index" >> code-quality-report.md
        radon mi src/yolocam --show >> code-quality-report.md || true

    - name: Find dead code
      run: |
        echo "" >> code-quality-report.md
        echo "### Dead Code Analysis" >> code-quality-report.md
        vulture src/yolocam --min-confidence 80 >> code-quality-report.md || true

    - name: Security analysis
      run: |
        echo "" >> code-quality-report.md
        echo "### Security Issues" >> code-quality-report.md
        bandit -r src/yolocam -f txt >> code-quality-report.md || true

    - name: Advanced security scan with Semgrep
      run: |
        echo "" >> code-quality-report.md
        echo "### Advanced Security Scan" >> code-quality-report.md
        semgrep --config=auto src/yolocam --text >> code-quality-report.md || true

    - name: Code duplication analysis
      run: |
        echo "" >> code-quality-report.md
        echo "### Code Duplication" >> code-quality-report.md
        # Using a simple approach - can be enhanced with tools like jscpd
        find src/yolocam -name "*.py" -exec wc -l {} + | sort -n | tail -10 >> code-quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: code-quality-report.md

    - name: Check quality thresholds
      id: quality_check
      run: |
        # Set quality thresholds
        MAX_COMPLEXITY=10
        MIN_MAINTAINABILITY=70
        
        # Check complexity
        HIGH_COMPLEXITY=$(radon cc src/yolocam --min=D --json | jq 'length')
        
        if [ "$HIGH_COMPLEXITY" -gt 0 ]; then
          echo "quality_issues=true" >> $GITHUB_OUTPUT
          echo "High complexity functions found: $HIGH_COMPLEXITY"
        else
          echo "quality_issues=false" >> $GITHUB_OUTPUT
        fi

    - name: Create quality issue
      if: steps.quality_check.outputs.quality_issues == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📊 Code quality issues detected',
            body: `## Code Quality Issues
            
            Automated code quality analysis has detected issues that need attention.
            
            ### Issues Found
            - High complexity functions detected
            - Dead code potentially identified
            - Security issues may be present
            
            ### Action Required
            1. Review the code quality report in workflow artifacts
            2. Refactor high-complexity functions
            3. Remove dead code
            4. Address security issues
            5. Update documentation if needed
            
            ### Reports
            - Full quality report available in workflow artifacts
            
            ---
            Generated by automated code quality workflow`,
            labels: ['maintenance', 'code-quality', 'automated']
          })

  dependency-health:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pipdeptree pip-check-reqs

    - name: Generate dependency tree
      run: |
        echo "## Dependency Health Report" >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "### Dependency Tree" >> dependency-report.md
        echo '```' >> dependency-report.md
        pipdeptree >> dependency-report.md
        echo '```' >> dependency-report.md

    - name: Check for unused dependencies
      run: |
        echo "" >> dependency-report.md
        echo "### Unused Dependencies" >> dependency-report.md
        echo '```' >> dependency-report.md
        pip-check-reqs --unused-deps src/ >> dependency-report.md || echo "No unused dependencies found" >> dependency-report.md
        echo '```' >> dependency-report.md

    - name: Check for missing dependencies
      run: |
        echo "" >> dependency-report.md
        echo "### Missing Dependencies" >> dependency-report.md
        echo '```' >> dependency-report.md
        pip-check-reqs --missing-deps src/ >> dependency-report.md || echo "No missing dependencies found" >> dependency-report.md
        echo '```' >> dependency-report.md

    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-health-report
        path: dependency-report.md

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark memory-profiler

    - name: Run performance benchmarks
      run: |
        # Create simple benchmark tests if they don't exist
        mkdir -p tests/benchmarks
        
        cat > tests/benchmarks/test_performance.py << 'EOF'
        import pytest
        import numpy as np
        from yolocam.core.config import YoloCAMConfig

        class TestPerformanceBenchmarks:
            def test_config_creation_speed(self, benchmark):
                """Benchmark configuration object creation."""
                def create_config():
                    return YoloCAMConfig()
                
                result = benchmark(create_config)
                assert result is not None
            
            def test_config_serialization_speed(self, benchmark):
                """Benchmark configuration serialization."""
                config = YoloCAMConfig()
                
                def serialize_config():
                    return config.to_dict()
                
                result = benchmark(serialize_config)
                assert isinstance(result, dict)
        EOF
        
        # Run benchmarks
        pytest tests/benchmarks/ --benchmark-json=benchmark-results.json || true

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false

  documentation-health:
    name: Documentation Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install doc8 pydocstyle

    - name: Check documentation syntax
      run: |
        echo "## Documentation Health Report" >> docs-report.md
        echo "" >> docs-report.md
        
        echo "### Documentation Syntax Check" >> docs-report.md
        echo '```' >> docs-report.md
        doc8 docs/ >> docs-report.md || true
        echo '```' >> docs-report.md

    - name: Check docstring quality
      run: |
        echo "" >> docs-report.md
        echo "### Docstring Quality" >> docs-report.md
        echo '```' >> docs-report.md
        pydocstyle src/yolocam >> docs-report.md || true
        echo '```' >> docs-report.md

    - name: Check for broken links
      run: |
        echo "" >> docs-report.md
        echo "### Documentation Build Test" >> docs-report.md
        cd docs && make html >> ../docs-report.md 2>&1 || echo "Documentation build failed" >> ../docs-report.md

    - name: Upload documentation report
      uses: actions/upload-artifact@v3
      with:
        name: documentation-health-report
        path: docs-report.md

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-health, performance-baseline, documentation-health]
    if: always()
    
    steps:
    - name: Create maintenance summary
      uses: actions/github-script@v6
      with:
        script: |
          const jobs = [
            { name: 'Code Quality', status: '${{ needs.code-quality.result }}' },
            { name: 'Dependency Health', status: '${{ needs.dependency-health.result }}' },
            { name: 'Performance Baseline', status: '${{ needs.performance-baseline.result }}' },
            { name: 'Documentation Health', status: '${{ needs.documentation-health.result }}' }
          ];
          
          const summary = jobs.map(job => {
            const emoji = job.status === 'success' ? '✅' : job.status === 'failure' ? '❌' : '⚠️';
            return `${emoji} ${job.name}: ${job.status}`;
          }).join('\n');
          
          const hasFailures = jobs.some(job => job.status === 'failure');
          
          if (hasFailures) {
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔧 Monthly maintenance check - Issues found',
              body: `## Monthly Maintenance Check Results
              
              ${summary}
              
              ### Action Required
              Review the failed checks and address any issues found.
              
              ### Reports
              Detailed reports are available in the workflow artifacts.
              
              ---
              Generated by automated maintenance workflow`,
              labels: ['maintenance', 'automated']
            });
          }
          
          console.log('Maintenance Summary:');
          console.log(summary);