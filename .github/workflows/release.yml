name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Run tests before release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=yolocam

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Extract version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation (can be enhanced with git-cliff or similar)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: YoloCAM v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: yolocam-dist
        asset_content_type: application/zip

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Uses PyPI trusted publishing (no API key needed if configured)
        # Otherwise, set PYPI_API_TOKEN in repository secrets
        password: ${{ secrets.PYPI_API_TOKEN }}

  docs:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs && make html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: yolocam.readthedocs.io  # Optional: custom domain

  notify:
    name: Post-release notifications
    runs-on: ubuntu-latest
    needs: [release, docs]
    if: always()
    
    steps:
    - name: Extract version
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Notify on success
      if: needs.release.result == 'success'
      run: |
        echo "‚úÖ YoloCAM v${{ steps.get_version.outputs.VERSION }} released successfully!"
        echo "üì¶ Package: https://pypi.org/project/yolocam/${{ steps.get_version.outputs.VERSION }}/"
        echo "üìö Docs: https://yolocam.readthedocs.io"

    - name: Notify on failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release failed for YoloCAM v${{ steps.get_version.outputs.VERSION }}"
        exit 1

    # Optional: Add Slack/Discord/email notifications here
    # - name: Slack notification
    #   if: needs.release.result == 'success'
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: success
    #     text: "YoloCAM v${{ steps.get_version.outputs.VERSION }} released!"
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}